---
title: "Maternal Seperation"
format: html
editor: visual
---

# Maternal behavior promotes resilience to adolescent stress in mice through a microglia-neuron axis

### Summary: 

Mitochondrial dysfunction is considered a potential risk factor for major depressive disorder in both adults and adolescents. Research indicates that adult mice vulnerable to chronic social defeat stress (CSDS) exhibit increased mitochondrial fission, leading to abnormal mitochondria and reduced ATP production. However, there is limited understanding of how adolescent stress susceptibility is linked to mitochondrial dysfunction. In this study, the authors explored the mechanisms underlying adolescent depression in mice using the accelerated social defeat stress (AsSD) model. They identified two groups of mice: those **susceptible (Sus)** to depressive-like behavior after exposure to the AsSD model, and **resilient (Res)** mice, who were able to resist depressive-like behavior after undergoing the AsSD model. These researchers assessed mitochondrial function in these wild-type mice after exposure to AsSD and compared them to **control** (**Con**) mice that did not undergo the AsSD paradigm. The results revealed a significant decrease in ATP levels in the medial prefrontal cortex (mPFC) of both male and female susceptible mice, while no such decrease was observed in the hippocampus. These findings suggest that stress leads to mitochondrial dysfunction in the mPFC of adolescent depression-like mice, with no observed differences between sexes (Figure 1J).

### Investigating how social defeat stress affects mitochondrial function in medial pre-frontal cortex MPFC

Accelerated social defeat stress(AcSD) paradigm they put their wild-type mice through it s a model used during discrete time periods 35-44 days old

experimenters then identified susceptible mice (Sus), resilient mice (Res), and Control mice (Con) that received normal rearing practices

## Figure 1J mPFC

#### step 1 loading in data

```{r}

library(dplyr)    
library(ggplot2)  
library(car)      
library(emmeans)
library(tidyr)    
library(readr)    

# Load data
f <- "https://raw.githubusercontent.com/meganhall719/_Data-Analysis-Replication_/refs/heads/main/Data/Fig1j-mPFC.csv"
m <- read_csv(f, col_names = TRUE)
head(m)
```

```{r}
# Step 1: Extract group values 
groups <- list(
  Con = m$Con,
  Sus = m$Sus,
  Res = m$Res
)

# Step 2: Prepare data for ANOVA while choosing the order that appeared in the paper
anova_data <- data.frame(
  values = c(groups$Con, groups$Sus, groups$Res),
  group = factor(rep(c("Con", "Sus", "Res"), each = length(groups$Con)),
                levels = c("Con", "Sus", "Res"))  # Setting the explicit order
)
```

```{r}
# Step 3: Run one-way ANOVA
anova_result <- aov(values ~ group, data = anova_data)
summary(anova_result)
```

```{r}
# Step 4: Run Bonferroni-corrected post-hoc tests
# Using pairwise t-tests with Bonferroni adjustment
posthoc <- pairwise.t.test(anova_data$values, anova_data$group, 
                          p.adjust.method = "bonferroni")
print(posthoc)
```

```{r}
# Alternative using emmeans (more flexibility)
emm <- emmeans(anova_result, "group")
pairs_result <- pairs(emm, adjust = "bonferroni")
print(pairs_result)
```

```{r}
# Step 5: Calculate summary statistics using dplyr
summary_stats <- anova_data %>%
  group_by(group) %>%
  summarise(
    mean = mean(values),
    sd = sd(values),
    se = sd / sqrt(n()),
    n = n(),
    .groups = "drop"  # This prevents the "summarise() has grouped output" message
  )

# Check the calculated statistics
print(summary_stats)
```

```{r}
# Step 6: Create the plot with ordered groups
p <- ggplot() +
  # Add bars
  geom_bar(data = summary_stats, 
           aes(x = group, y = mean, fill = group),
           stat = "identity", width = 0.7, color = "black") +
  # Add error bars
  geom_errorbar(data = summary_stats,
                aes(x = group, ymin = mean - se, ymax = mean + se),
                width = 0.2) +
  # Add individual data points
  geom_point(data = anova_data,
             aes(x = group, y = values),
             position = position_jitter(width = 0.2),
             shape = 1, size = 2) +
  # Color scheme
  scale_fill_manual(values = c("Con" = "white", "Sus" = "red", "Res" = "lightblue")) +
  # Labels
  labs(
    title = "mPFC",
    y = "Mitochondrial ATP\n(nmol/μg protein, %)",
    x = NULL
  ) +
  # Theme settings
  theme_classic() +
  theme(
    legend.position = "none",
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  )

# Step 7: Add p-value annotations

y_max <- max(summary_stats$mean) * 1.3  # Set a base height for annotations

p + 
  # Add p-value annotations 
  annotate("text", x = 1.5, y = y_max, label = "p = 0.0003") +
  annotate("text", x = 2.5, y = y_max * 0.9, label = "p = 0.0017") +
  
  # Add brackets
  annotate("segment", x = 1, xend = 2, y = y_max * 0.95, yend = y_max * 0.95) +
  annotate("segment", x = 2, xend = 3, y = y_max * 0.85, yend = y_max * 0.85) 


```

## Figure 1J Hippocampus

### Loading in data set

```{r}

f<- "https://raw.githubusercontent.com/meganhall719/_Data-Analysis-Replication_/refs/heads/main/Data/Fig1j-Hippocampus.csv"
h<-read_csv(f, col_names = TRUE)

head(h)
```

```{r}
# Load required packages
library(dplyr)    # for data manipulation
library(ggplot2)  # for plotting
library(car)      # for Anova function
library(emmeans)  # for post-hoc tests


# Step 1: Perform one-way ANOVA using the data 

groups <- list(
  Con = h$Con,
  Sus = h$Sus,
  Res = h$Res
)

# Convert the list to a data frame for analysis
anova_data$group <- factor(anova_data$group, levels = c("Con", "Sus", "Res"))
summary_stats$group <- factor(summary_stats$group, levels = c("Con", "Sus", "Res"))

# Step 2: Run the one-way ANOVA
anova_result <- aov(values ~ group, data = anova_data)
summary(anova_result)
```

```{r}
# Step 3: Perform Bonferroni-corrected pairwise comparisons
# Using the emmeans package for post-hoc tests
posthoc <- emmeans(anova_result, "group")
pairs_result <- pairs(posthoc, adjust = "bonferroni")
print(pairs_result)

# Step 4: Calculate summary statistics for plotting using dplyr
summary_stats <- anova_data %>%
  group_by(group) %>%
  summarise(
    mean = mean(values),
    sd = sd(values),
    se = sd / sqrt(n()),
    n = n()
  )
```

```{r}
# Step 5: Create the plot with the correct order
ggplot() +
  # Add bars for group means
  geom_bar(data = summary_stats, 
           aes(x = group, y = mean, fill = group),
           stat = "identity", width = 0.7, color = "black") +
  # Add error bars
  geom_errorbar(data = summary_stats,
                aes(x = group, ymin = mean - se, ymax = mean + se),
                width = 0.2) +
  # Add individual data points
  geom_point(data = anova_data,
             aes(x = group, y = values),
             position = position_jitter(width = 0.2),
             shape = 1, size = 2) +
  # Customize colors
  scale_fill_manual(values = c("Con" = "white", "Sus" = "#FFB6C1", "Res" = "#ADD8E6")) +
  # Labels and theme
  labs(
    title = "Hippocampus",
    y = "Mitochondrial ATP\n(nmol/μg protein, %)",
    x = NULL
  ) +
  theme_classic() +
  theme(
    legend.position = "none",
    axis.text = element_text(size = 12),
    axis.title = element_text(size = 14)
  ) +
  # Add p-value annotations based on your Bonferroni test results
  annotate("text", x = 1.5, y = 190, label = "p = 0.6146") +
  annotate("text", x = 2.5, y = 170, label = "p = 0.1364") +
  annotate("text", x = 2, y = 210, label = "p > 0.9999") +
  annotate("segment", x = 1, xend = 2, y = 180, yend = 180) +
  annotate("segment", x = 2, xend = 3, y = 160, yend = 160) +
  annotate("segment", x = 1, xend = 3, y = 200, yend = 200)
```
